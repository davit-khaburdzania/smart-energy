# Use the latest stable version of Semaphore 2.0 YML syntax:
version: v1.0

# Name of your pipeline. In this example we connect two pipelines with
# a promotion, so it helps to differentiate what's the job of each.
name: Elixir Phoenix example CI pipeline on Semaphore

# An agent defines the environment in which your code runs.
# It is a combination of one of available machine types and operating
# system images. See:
# https://docs.semaphoreci.com/article/20-machine-types
# https://docs.semaphoreci.com/article/32-ubuntu-1804-image
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804

# Blocks make up the structure of a pipeline and are executed sequentially.
# Each block has a task that defines one or many parallel jobs. Jobs define
# the commands to execute.
# See https://docs.semaphoreci.com/article/62-concepts
blocks:
  - name: Set up
    task:
      jobs:
      - name: compile and build plts
        commands:
          # Checkout code from Git repository. This step is mandatory if the
          # job is to work with your code.
          - checkout
          - sem-version elixir 1.11

          # Restore dependencies from cache, command won't fail if it's
          # missing. More on caching:
          # - https://docs.semaphoreci.com/article/149-caching
          # - https://docs.semaphoreci.com/article/87-language-elixir
          - cache restore

          - mix deps.get
          - mix do compile
          - MIX_ENV=test mix compile

          # Store deps after compilation, otherwise rebar3 deps (that is, most
          # Erlang deps) won't be cached:
          - cache store

  - name: Analyze code
    task:
      # Commands in prologue run at the beginning of each parallel job.
      # https://docs.semaphoreci.com/article/50-pipeline-yaml
      prologue:
        commands:
        - checkout
        - sem-version elixir 1.11
        - cache restore
      # This block contains 3 parallel jobs:
      jobs:
      # - name: credo
      #   commands:
      #   - mix credo -a

      - name: formatter
        commands:
        - mix format --check-formatted

  - name: Run tests
    task:
      prologue:
        commands:
        - checkout
        - sem-version elixir 1.11
        - cache restore

      jobs:
      - name: ex_unit
        # Define an environment variable
        # See https://docs.semaphoreci.com/article/66-environment-variables-and-secrets
        env_vars:
        - name: DATABASE_URL
          value: "ecto://postgres:@0.0.0.0:5432/sema_test"
        commands:
        # Start Postgres database service
        # https://docs.semaphoreci.com/article/54-toolbox-reference#sem-service
        - sem-service start postgres
        - mix test
      epilogue:
        always:
          commands:
            # Publish test results
            - test-results publish /tmp/junit.xml

blocks:
  - name: Deploy
    task:
      secrets:
        - name: smart-energy-dev-heroku
      env_vars:
        - name: HEROKU_REMOTE
          value: https://git.heroku.com/smart-energy-dev.git
        - name: HEROKU_APP_NAME
          value: smart-energy-dev
      jobs:
      - name: Push code
        commands:
          - checkout --use-cache
          - ssh-keyscan -H heroku.com >> ~/.ssh/known_hosts
          - chmod 600 ~/.ssh/id_rsa_semaphore_heroku
          - ssh-add ~/.ssh/id_rsa_semaphore_heroku
          - git config --global url.ssh://git@heroku.com/.insteadOf https://git.heroku.com/
          - git remote add heroku $HEROKU_REMOTE
          - git push heroku -f $SEMAPHORE_GIT_BRANCH:master
          - heroku run --app $HEROKU_APP_NAME rake db:migrate
          - heroku ps:restart

promotions:
  - name: Deploy to Heroku
    pipeline_file: heroku.yml
